{"version":3,"sources":["InformationPopup.js","VariableList.js","CirclePlot.js","BarchartInformation.js","City.js","modules/cleanData.js","Cities.js","Introduction.js","modules/getData.js","ScrollButton.js","About.js","App.js","index.js"],"names":["removeAnimation","e","target","style","animation","InformationPopup","children","className","onMouseEnter","VariableList","d3","require","CirclePlot","node","width","height","data","cityAverages","parent","useRef","console","log","useEffect","y","x","svgDoesExist","select","_groups","xScale","yScale","xAxis","yAxis","yAxisG","xAxisG","pixelOffsetY","pixelOffsetX","svg","current","append","attr","circleRadius","graphTitle","margin","top","right","bottom","left","pixelStep","maxDragDistance","innerWidth","innerHeight","xVar","yVar","xValue","d","yValue","zoom","scaleExtent","extent","on","zoomed","call","propertyNames","Object","getOwnPropertyNames","yFields","slice","g","text","setupScales","setupInput","setupAxis","points","points_g","classed","scaleLinear","domain","range","nice","max","min","axisBottom","tickSize","tickPadding","axisLeft","selectAll","remove","selectionChangedY","this","value","checkSameAxis","transition","enter","mouseOverEvent","mouseOutEvent","exit","xFields","property","checkMaxDragDistance","new_xScale","transform","rescaleX","new_yScale","rescaleY","scale","k","i","id","city","replace","offsetX","offsetY","addHoverLabels","removeHoverLabels","GemiddeldVermogenPlaats","gemiddeldeUurPrijs","gemiddeldeGroeiPerJaar","createScatterPlot","ref","BarchartInformation","City","cityObject","maxValue","useState","title","maxDomainValue","scaleBand","map","jaar","padding","ticks","tickValue","x2","stroke","dy","dx","textAnchor","bandwidth","aantal","formatCityData","array","countedDates","allYears","item","allItems","Set","counter","forEach","length","j","countItemsinArray","datum","startdatesellingpoint","createArrayCityYears","column","filter","filterArray","arrayOfYears","key","push","newArray","sort","a","b","sortArrayLargeToSmall","Cities","verkoopPunten","CITIES_KEY","MAX_VALUE_KEY","cities","setCities","setmaxValue","selectCityRef","sortedByCityNames","cityList","JSON","parse","localStorage","getItem","setItem","stringify","type","onClick","cityObject2","newMaxCityAantal","aantalArray","Math","apply","calculateMaxAantal","Introduction","heading","getData","url","fetch","result","json","resultJSON","ScrollButton","scrollDirection","pageHeight","window","scrollBy","About","href","root","document","getElementById","heigth","App","setcityAverages","setVerkoopPunten","then","afstandStation","autoPerHuishouden","ReactDOM","render"],"mappings":"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","file":"static/js/main.5db82bae.chunk.js","sourcesContent":["import React from 'react'\r\n\r\n\r\nfunction removeAnimation(e) {\r\n    e.target.style.animation = 0;\r\n}\r\n\r\nexport default function InformationPopup({ children }) {\r\n\r\n    return (\r\n        <div className=\"information-popup\">\r\n            <div onMouseEnter={removeAnimation}>i</div>\r\n            <div>\r\n                {children}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nexport default function VariableList() {\r\n    return (\r\n        <ul>\r\n            <li>Uitleg variabelen</li>\r\n            <li>GemiddeldeUurPrijs: Wat is de gemiddelde uurprijs van een parkeerautomaat binnen de gemeente</li>\r\n            <li>GemiddeldVermogenPlaats: Wat is het gemiddelde vermogen (euro's) van een huishouden per gemeente</li>\r\n            <li>GemiddeldeGroeiPerJaar: Hoeveel parkeerautomaten worden er gemiddeld toegevoegd per jaar per gemeente </li>\r\n            <li>AfstandStation: Wat is de gemiddelde afstand tot een station per huishouden in de gemeente</li>\r\n            <li>AutoPerHuishouden: Hoeveel auto's heeft een gemiddeld huishouden tot zijn beschikking per gemeente</li>\r\n        </ul>\r\n    )\r\n}\r\n","import React, { useEffect, useRef, useState } from 'react'\r\nimport InformationPopup from './InformationPopup'\r\nimport VariableList from './VariableList'\r\nconst d3 = require('d3')\r\n\r\n//This function will wrap all the logic for the Linechart component\r\nfunction CirclePlot({ node, width, height, cityAverages }) {\r\n    const data = cityAverages\r\n    const parent = useRef(node)\r\n    console.log(\"Creating CirclePlot component.\", node, width, parent)\r\n    const yStandard = 'gemiddeldeUurPrijs'\r\n\r\n    useEffect(() => {\r\n        createScatterPlot(yStandard, 'gemiddeldeGroeiPerJaar')\r\n    })\r\n    return <section ref={parent} className=\"svgParent\">\r\n        <InformationPopup>\r\n            <VariableList />\r\n        </InformationPopup>\r\n    </section>\r\n\r\n    function createScatterPlot(y, x) {\r\n\r\n        function svgDoesExist() {\r\n            const svgTest = d3.select('.svgParent svg');\r\n            if (svgTest._groups[0][0]) {\r\n                return true;\r\n            }\r\n        }\r\n        if (svgDoesExist()) {\r\n            return;\r\n        }\r\n\r\n\r\n        const svg = d3.select(parent.current)\r\n            .append(\"svg\").attr(\"width\", width).attr(\"height\", height);\r\n\r\n        //globale variabelen voor functies\r\n        let xScale;\r\n        let yScale;\r\n        let xAxis;\r\n        let yAxis;\r\n        let yAxisG;\r\n        let xAxisG;\r\n\r\n        const circleRadius = 10\r\n        const graphTitle = 'Vermogen ten opzichten van groei in parkeer automaten'\r\n        const margin = {\r\n            top: 70,\r\n            right: 120,\r\n            bottom: 80,\r\n            left: 140\r\n        }\r\n        const pixelStep = \"18\"\r\n        let pixelOffsetY;\r\n        let pixelOffsetX;\r\n        let maxDragDistance = 120;\r\n\r\n        //bereken maximale lengtes van grafiek\r\n        const innerWidth = width - margin.left - margin.right\r\n        const innerHeight = height - margin.top - margin.bottom\r\n\r\n        //cip path maken zodat bolletjes niet buiten de assen komen\r\n        svg.append(\"defs\").append(\"clipPath\")\r\n            .attr(\"id\", \"clip\")\r\n            .append(\"rect\")\r\n            .attr(\"width\", innerWidth)\r\n            .attr(\"height\", innerHeight);\r\n\r\n        let xVar = x\r\n        let yVar = y\r\n\r\n        //callback functions die loopen over de waardes\r\n        const xValue = d => d[xVar]\r\n        const yValue = d => d[yVar]\r\n        //render de chart\r\n        var zoom = d3.zoom()\r\n            .scaleExtent([1, 20])\r\n            .extent([\r\n                [0, 0],\r\n                [width, height]\r\n            ])\r\n            .on(\"zoom\", zoomed)\r\n        svg.call(zoom);\r\n\r\n        //haal propertynames uit de data voor de filteropties\r\n        let propertyNames = Object.getOwnPropertyNames(data[0])\r\n        let propertyNamesWithoutCity = propertyNames.slice(1, 6)\r\n        let yFields = propertyNamesWithoutCity\r\n\r\n        console.log(propertyNames)\r\n        //creeer groep voor grafiek\r\n        const g = svg.append('g')\r\n            .attr('transform', `translate(${margin.left}, ${margin.top})`)\r\n        //title toevoegen\r\n        g.append('text')\r\n            .attr('y', -40)\r\n            .text(graphTitle)\r\n\r\n        //initiele setup\r\n        setupScales()\r\n        setupInput(yFields)\r\n        setupAxis()\r\n\r\n        //creer aparte groep voor de getekende punten met een clip path\r\n        var points_g = g.append(\"g\")\r\n            .attr(\"clip-path\", \"url(#clip)\")\r\n            .classed(\"points_g\", true);\r\n        var points;\r\n        //roep 1 keer aan bij laden grafiek\r\n        selectionChangedY()\r\n\r\n        //initieren van de x- en yScale\r\n        function setupScales() {\r\n            xScale = d3.scaleLinear()\r\n                .domain(d3.extent(data, xValue)) //extent retured array met berekende min en max\r\n                .range([0, innerWidth])\r\n                .nice()\r\n\r\n            yScale = d3.scaleLinear()\r\n                .domain([d3.max(data, yValue), d3.min(data, yValue)])\r\n                .range([0, innerHeight])\r\n                .nice()\r\n        }\r\n        //initieren van de x- en yAxis\r\n        function setupAxis() {\r\n            xAxis = d3.axisBottom(xScale)\r\n                .tickSize(-innerHeight)\r\n                .tickPadding(15)\r\n\r\n            //creer axis\r\n            yAxis = d3.axisLeft(yScale)\r\n                .tickSize(-innerWidth)\r\n                .tickPadding(15)\r\n            yAxisG = g.append('g')\r\n\r\n            //toevoegen van label aan Y-as\r\n            yAxisG.append('text')\r\n                .attr('fill', 'white')\r\n                .attr('class', 'axis-label')\r\n                .attr('transform', `rotate(-90)`)\r\n                .text(yVar)\r\n                .attr('y', -50)\r\n                .attr('x', -innerHeight / 2)\r\n                .attr('text-anchor', 'middle')\r\n\r\n            //voeg groep toe en creer yas label\r\n            xAxisG = g.append('g')\r\n                .call(xAxis)\r\n            xAxisG\r\n                .attr('transform', `translate(0, ${innerHeight})`)\r\n                .selectAll('.domain').remove()\r\n\r\n            //toevoegen van legenda aan X-as\r\n            xAxisG.append('text')\r\n                .attr('y', 50)\r\n                .attr('x', innerWidth / 2)\r\n                .attr('fill', 'white')\r\n                .attr('class', 'axis-label')\r\n                .text(xVar)\r\n        }\r\n        //wordt aangeroepen wanneer select element veranderd\r\n        function selectionChangedY() {\r\n            //verwijder een bestaande error message\r\n\r\n            //this is the form element, zet naar standaard wanneer er geen change is uitgevoerd (eerste keer)\r\n            yVar = this ? this.value : yVar\r\n            //geef een error message wanneer de gekozen Y-as gelijk is aan de X-as\r\n            if (checkSameAxis()) {\r\n                return;\r\n            }\r\n            yScale.domain([d3.max(data, yValue), 0]) //nieuw domain maken\r\n\r\n            //call nieuwe Y-as\r\n            yAxisG.call(yAxis)\r\n            yAxisG.selectAll('.domain').remove()\r\n            //update y-as label\r\n            yAxisG.select('text').text(yVar)\r\n\r\n            //selecteer alle circles in parent element 'points_g'\r\n            points = points_g.selectAll('circle').data(data)\r\n            //update selection\r\n            points.transition().attr('cy', d => yScale(yValue(d)))\r\n            //enter selection\r\n            points = points.enter().append('circle')\r\n                .on('mouseover', mouseOverEvent)\r\n                .on('mouseout', mouseOutEvent)\r\n                .attr('cy', d => yScale(yValue(d))) //y attribute wordt geset voor ieter item\r\n                .attr('cx', d => xScale(xValue(d))) //x attribute wordt geset voor ieter item\r\n                .attr('r', circleRadius) //circle radius\r\n                .attr('fill', 'white')\r\n            //exit selection\r\n            points.exit().remove()\r\n        }\r\n        //setup input formulier\r\n        function setupInput(yFields, xFields) {\r\n\r\n            d3.select(parent.current)\r\n                .append('form')\r\n                .append('select')\r\n                .text(\"Select a text value\")\r\n                .on('change', selectionChangedY)\r\n                .selectAll('option')\r\n                .data(yFields)\r\n                .enter()\r\n                .append('option')\r\n                .attr('value', d => d)\r\n                .text(d => \"Y-as: \" + d)\r\n                .property(\"selected\", d => d === yVar)\r\n        }\r\n        //zoomed wordt uitgevoerd op het scrollevent\r\n        function zoomed(e) {\r\n            //create max transform distance, snap back when dragged too far\r\n            checkMaxDragDistance(e)\r\n            // create new scale objects based on event\r\n            var new_xScale = e.transform.rescaleX(xScale);\r\n            var new_yScale = e.transform.rescaleY(yScale);\r\n            // update axes\r\n            xAxisG.call(xAxis.scale(new_xScale));\r\n            yAxisG.call(yAxis.scale(new_yScale));\r\n            //update points\r\n            points = points_g.selectAll('circle').data(data)\r\n            points\r\n                .attr('cx', (d) => new_xScale(xValue(d)))\r\n                .attr('cy', (d) => new_yScale(yValue(d)));\r\n        }\r\n        //maximale drag distance waarna de grafiek terugschiet naar een begint punt\r\n        function checkMaxDragDistance(e) {\r\n            //enkel wanneer niet ingezoomd\r\n            if (e.transform.k == 1) {\r\n                if (e.transform.x > maxDragDistance) {\r\n                    e.transform.x = 20\r\n                }\r\n                if (e.transform.y < -maxDragDistance) {\r\n                    e.transform.y = -20\r\n                }\r\n            }\r\n        }\r\n        function checkSameAxis() {\r\n            d3.select('.error').remove()\r\n            if (yVar == xVar) {\r\n                d3.select('form').append('text')\r\n                    .text('Het heeft weinig zin om dezelfde assen te kiezen!')\r\n                    .classed('error', true)\r\n                return true;\r\n            }\r\n        }\r\n        //mouseover event\r\n        function mouseOverEvent(d, i) {\r\n            //verwijder alle niet letter en numerieke charachters als id's\r\n            let city = i.city;\r\n\r\n            let id = city.replace(/[\\W_]+/g, \"\")\r\n            //vergroot circle radius * 2 en kleur oranje\r\n            d3.select(this).transition().attr('r', circleRadius * 2)\r\n                .attr('fill', 'orangered')\r\n            //verplaats hover informatie naar linksboven wanneer je je op de rand van de grafiek bevindt\r\n            if (d.offsetX > innerWidth - innerWidth / 4) {\r\n                pixelOffsetX = 150;\r\n            } else {\r\n                pixelOffsetX = -10;\r\n            }\r\n            if (d.offsetY > (innerHeight - innerHeight / 4)) {\r\n                pixelOffsetY = 60;\r\n            } else {\r\n                pixelOffsetY = -10;\r\n            }\r\n\r\n            //toevoegen van labels op hover\r\n            addHoverLabels(d, i, id)\r\n        }\r\n        //mouseout event\r\n        function mouseOutEvent(d, i) {\r\n            //verwijder alle niet letter en numerieke charachters als id's\r\n            let city = i.city;\r\n            let id = city.replace(/[\\W_]+/g, \"\");\r\n            d3.select(this).transition().attr('r', circleRadius) //radius naar normaal\r\n                .attr('fill', 'white')\r\n            removeHoverLabels(d, id)\r\n        }\r\n        function addHoverLabels(d, i, id) {\r\n            //toevoegen hover informatie\r\n            svg.append('text')\r\n                .attr('id', \"t\" + id)\r\n                .attr('x', d.offsetX - pixelOffsetX)\r\n                .attr('y', d.offsetY - pixelOffsetY)\r\n                .text(`${i.city}`)\r\n            svg.append('text')\r\n                .attr('id', \"t\" + id + '1')\r\n                .attr('x', d.offsetX - pixelOffsetX)\r\n                .attr('y', d.offsetY - pixelOffsetY + pixelStep * 1)\r\n                .text(`Gemiddeld vermogen: ${i.GemiddeldVermogenPlaats}`)\r\n            svg.append('text')\r\n                .attr('id', \"t\" + id + '2')\r\n                .attr('x', d.offsetX - pixelOffsetX)\r\n                .attr('y', d.offsetY - pixelOffsetY + pixelStep * 2)\r\n                .text(`Gemiddelde uur prijs: ${i.gemiddeldeUurPrijs}`)\r\n            svg.append('text')\r\n                .attr('id', \"t\" + id + '3')\r\n                .attr('x', d.offsetX - pixelOffsetX)\r\n                .attr('y', d.offsetY - pixelOffsetY + pixelStep * 3)\r\n                .text(`gemiddelde groei per jaar: ${i.gemiddeldeGroeiPerJaar}`)\r\n        }\r\n        function removeHoverLabels(d, id) {\r\n            d3.select(\"#t\" + id).remove() //verwijder toegevoegd label\r\n            d3.select(\"#t\" + id + '1').remove() //verwijder toegevoegd label\r\n            d3.select(\"#t\" + id + '2').remove() //verwijder toegevoegd label\r\n            d3.select(\"#t\" + id + '3').remove() //verwijder toegevoegd label\r\n\r\n        }\r\n    }\r\n}\r\nexport default CirclePlot","import React from 'react'\r\n\r\nexport default function BarchartInformation() {\r\n    return (\r\n        <ul>\r\n            <li>Vergelijk steden</li>\r\n            <li>Combineer verschillende steden om onderlinge groei tegen elkaar te vergelijken. De groei is hierbij het aantal toegevoegde parkeerautomaten in het aangegeven jaar.</li>\r\n            <li>Verwijder de huidige selectie met de clear knop</li>\r\n        </ul>\r\n    )\r\n}\r\n","import React, { useState } from 'react'\r\nconst d3 = require('d3')\r\n\r\nconst width = 450;\r\nconst height = 350;\r\nconst margin = {\r\n    top: 50,\r\n    right: 20,\r\n    bottom: 20,\r\n    left: 50\r\n}\r\n\r\nexport default function City({ cityObject, maxValue }) {\r\n    const [data, setData] = useState(cityObject.data);\r\n    console.log(maxValue)\r\n    const title = cityObject.city\r\n    //bereken maximale lengtes van grafiek\r\n    const innerWidth = width - margin.left - margin.right\r\n    const innerHeight = height - margin.top - margin.bottom\r\n    let maxDomainValue = maxValue;\r\n    const xScale = d3.scaleBand()\r\n        .domain(data.map(d => d.jaar))\r\n        .range([0, innerWidth])\r\n        .padding(0.1)\r\n    const yScale = d3.scaleLinear()\r\n        .domain([maxDomainValue, 0])\r\n        .range([0, innerHeight])\r\n\r\n    return (\r\n        <li>\r\n            <svg width={width} height={height}>\r\n                <g transform={`translate(${margin.left}, ${margin.top})`}>\r\n                    <text className=\"barchart-title\" x={innerWidth / 2} y={\"-.71em\"}>{title}</text>\r\n                    {yScale.ticks().map(tickValue => {\r\n                        return <g key={tickValue} transform={`translate(${0}, ${yScale(tickValue)})`}>\r\n                            <line x2={innerWidth} stroke=\"lightblue\" />\r\n                            <text dy=\".32em\" dx=\"-.2em\" style={{ textAnchor: \"end\" }}>{tickValue}</text>\r\n                        </g>\r\n                    })}\r\n                    {xScale.domain().map(tickValue => {\r\n                        return <text key={tickValue} y={innerHeight + 5} x={xScale(tickValue) + xScale.bandwidth() / 2} dy=\".71em\" style={{ textAnchor: \"middle\" }}>{tickValue}</text>\r\n                    })}\r\n                    {data.map((d) => <rect y={yScale(d.aantal)}\r\n                        key={d.jaar}\r\n                        x={xScale(d.jaar)}\r\n                        height={innerHeight - yScale(d.aantal)}\r\n                        width={xScale.bandwidth()}\r\n                    />)}\r\n                </g>\r\n            </svg>\r\n        </li>\r\n    )\r\n}\r\n","\r\n//format city data to where you can use it in a bar chart\r\nexport function formatCityData(array, city) {\r\n    const cityVerkoopPunten = filterArray(array, 'city', city)\r\n    const cityVerkoopPuntenEnJaren = createArrayCityYears(cityVerkoopPunten)\r\n    const countedDates = countItemsinArray(cityVerkoopPuntenEnJaren)\r\n    const cityObject = {\r\n        city: city,\r\n        dates: countedDates\r\n    }\r\n    const arrayOfYears = []\r\n    for (const key in countedDates) {\r\n        arrayOfYears.push({\r\n            jaar: key,\r\n            aantal: countedDates[key]\r\n        })\r\n    }\r\n    const sortedArrayOfYears = sortArrayLargeToSmall(arrayOfYears, 'jaar')\r\n    return arrayOfYears\r\n}\r\n\r\n\r\n//filter given array on given column and value\r\nexport function filterArray(array, column, value) {\r\n    return array.filter(item => {\r\n        return item[column] === value\r\n    })\r\n}\r\n\r\n// export function calculateMaxAantal(array, array2) {\r\n//     let cityObjects = []\r\n//     array.forEach(item => {\r\n//         const aantal = formatCityData(array2, item.city)\r\n//         const aantalArray = aantal.map(item => {\r\n//             return +item.aantal\r\n//         })\r\n//         cityObjects = [...cityObjects, ...aantalArray]\r\n//     })\r\n//     return Math.max.apply(Math, cityObjects);\r\n// }\r\n\r\nexport function calculateMaxAantal(array) {\r\n    const aantalArray = array.map(item => {\r\n        return +item.aantal\r\n    })\r\n    return Math.max.apply(Math, aantalArray);\r\n}\r\n\r\n//create array with only the city and start year of the selling point\r\nexport function createArrayCityYears(array) {\r\n    return array.map(item => {\r\n        const datum = item.startdatesellingpoint\r\n        let jaar;\r\n        if (datum) {\r\n            jaar = datum.slice(0, 4)\r\n        }\r\n        else {\r\n            jaar = '0000'\r\n        }\r\n        return {\r\n            city: item.city,\r\n            jaar: jaar\r\n        }\r\n    })\r\n}\r\n\r\n//return an object with all years and thier quantitive values\r\nexport function countItemsinArray(array) {\r\n    const allYears = array.map(item => item.jaar)\r\n    let allItems = [...new Set(allYears)] //maak array van alle unieke jaartallen\r\n    let counter = {} //maak counter object dat later gevuld wordt\r\n    allItems.forEach(item => {\r\n        counter[item] = 0\r\n    })\r\n\r\n    for (let i = 0; i < array.length; ++i) { //loop over volledige array\r\n        for (let j = 0; j < allItems.length; j++) { //loop over unieke jaartallen voor iedere waarde in volledige array\r\n            if (array[i].jaar == allItems[j])\r\n                counter[allItems[j]] += 1\r\n        }\r\n    }\r\n    return counter;\r\n}\r\n\r\n\r\n//returns sorted array from large to small\r\nexport function sortArrayLargeToSmall(array, property) {\r\n    let newArray = [...new Set(array)]\r\n    //check of er een property is meegegeven voor sorteren van objecten\r\n    if (typeof property == 'undefined') { //geen property meegegeven\r\n        return newArray.sort((a, b) => {\r\n            return b - a\r\n        })\r\n    }\r\n    //wel property meegegeven\r\n    return newArray.sort((a, b) => {\r\n        return b[property] - a[property]\r\n    })\r\n}\r\n\r\nexport function sortedArrayNamesSmallToLarge(array, property) {\r\n    const newArray = [...new Set(array)]\r\n    const sortedArray = newArray.sort(function (a, b) {\r\n        if (a[property] < b[property]) { return -1; }\r\n        if (a[property] > b[property]) { return 1; }\r\n        return 0;\r\n    })\r\n    return sortedArray\r\n}\r\n\r\n\r\nexport function cleanAverages(array) {\r\n    array.forEach(item => {\r\n        if (!item.afstandStation) {\r\n            item.afstandStation = 0\r\n        }\r\n        if (!item.autoPerHuishouden) {\r\n            item.autoPerHuishouden = 0\r\n        }\r\n    })\r\n}","import React, { useState, useEffect, useRef } from 'react'\r\nimport BarchartInformation from './BarchartInformation'\r\nimport City from './City'\r\nimport InformationPopup from './InformationPopup'\r\nimport { formatCityData, sortedArrayNamesSmallToLarge, calculateMaxAantal } from './modules/cleanData'\r\n\r\nexport default function Cities({ cityAverages, verkoopPunten }) {\r\n\r\n    const CITIES_KEY = 'CITIES_LIST_KEY'\r\n    const MAX_VALUE_KEY = 'MAX_VALUE_KEY'\r\n    const [cities, setCities] = useState([])\r\n    const [maxValue, setmaxValue] = useState(0)\r\n    const selectCityRef = useRef()\r\n    const sortedByCityNames = sortedArrayNamesSmallToLarge(cityAverages, \"city\")\r\n\r\n    //on page load\r\n    useEffect(() => {\r\n        //add localstorage value to states\r\n        const cityList = JSON.parse(localStorage.getItem(CITIES_KEY))\r\n        const maxValue = JSON.parse(localStorage.getItem(MAX_VALUE_KEY))\r\n        setCities(cityList)\r\n        setmaxValue(maxValue)\r\n    }, [])\r\n    //add to localstorage on state change\r\n    useEffect(() => {\r\n        localStorage.setItem(CITIES_KEY, JSON.stringify(cities))\r\n        localStorage.setItem(MAX_VALUE_KEY, JSON.stringify(maxValue))\r\n    }, [cities])\r\n\r\n    //add targeted city to state\r\n    function handleAddCity() {\r\n        const city = selectCityRef.current.value\r\n        // const cityObject = verkoopPunten.find(item => city === item.city)\r\n        const cityObject = formatCityData(verkoopPunten, city)\r\n        const cityObject2 = {\r\n            city: city,\r\n            data: cityObject\r\n        }\r\n        setCities(\r\n            [...cities, cityObject2]\r\n        )\r\n        const newMaxCityAantal = calculateMaxAantal(cityObject)\r\n        if (maxValue < newMaxCityAantal) {\r\n            setmaxValue(newMaxCityAantal)\r\n        }\r\n    }\r\n    //clear the state with the city list\r\n    function clearList() {\r\n        setCities([])\r\n        setmaxValue(0)\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {/* create form where you can add cities to the state */}\r\n            <section className=\"barchart-container\">\r\n                <InformationPopup>\r\n                    <BarchartInformation />\r\n                </InformationPopup>\r\n                <h2>Aantal toegevoegde parkeerautomaten per jaar</h2>\r\n                <form>\r\n                    <select ref={selectCityRef}>\r\n                        {sortedByCityNames.map(item => {\r\n                            return <option key={item.city} value={item.city}>{item.city}</option>\r\n                        }\r\n                        )}\r\n                    </select>\r\n                    <button type=\"button\" onClick={handleAddCity}>Add</button>\r\n                    <button type=\"button\" onClick={clearList}>Clear</button>\r\n                </form>\r\n                {cities.length === 0 && <ul className=\"zeroState\">\r\n                    <li>Voeg een stad toe om te vergelijken</li>\r\n                </ul>}\r\n                {/* return city visualisations of all cities in the state */}\r\n                <ul>\r\n                    {cities.map(item => {\r\n                        return <City key={item.city} cityObject={item} maxValue={maxValue} />\r\n                    })}\r\n                </ul>\r\n            </section>\r\n        </>\r\n\r\n    )\r\n}\r\n\r\n\r\n\r\n","import React from 'react'\r\n\r\nexport default function Introduction({ heading, text }) {\r\n    return (\r\n        <section className=\"introduction\">\r\n            <div>\r\n                <h1>{heading}</h1>\r\n                <p>{text}</p>\r\n                <p>Ontworpen en gerealiseerd door <span>Sam Slotemaker</span></p>\r\n            </div>\r\n        </section>\r\n    )\r\n}\r\n","export default async function getData(url) {\r\n    const result = await fetch(url)\r\n    const resultJSON = await result.json()\r\n    return resultJSON\r\n}\r\n\r\n","import React from 'react'\r\n\r\nexport default function ScrollButton({ scrollDirection }) {\r\n\r\n    function handleScrollButtonDown() {\r\n        let pageHeight = window.innerHeight;\r\n        window.scrollBy(0, pageHeight);\r\n    }\r\n\r\n    function handleScrollButtonUp() {\r\n        let pageHeight = window.innerHeight;\r\n        window.scrollBy(0, -pageHeight);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {scrollDirection === 1 && <button className=\"scroll-button up\" onClick={handleScrollButtonUp}>Up!</button>}\r\n            {scrollDirection === 2 && <button className=\"scroll-button down\" onClick={handleScrollButtonDown}>Next!</button>}\r\n        </>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nexport default function About() {\r\n    return (\r\n        <section className=\"about\">\r\n            <h2>Over dit project</h2>\r\n            <p>Tijdens dit project ben ik opzoek gegaan naar bepaalde verbanden, verbanden die zouden kunnen aantonen dat rijke gebieden voorgetrokken worden, of juist achterblijven bij de overheid.</p>\r\n            <h3>Datasets</h3>\r\n            <ul><li><a href=\"https://opendata.rdw.nl/Parkeren/Open-Data-Parkeren-GEO-VERKOOPPUNT/cgqw-pfbp/data\">Geodata van parkeerautomaten, RDW</a></li>\r\n                <li><a href=\"https://opendata.rdw.nl/Parkeren/Open-Data-Parkeren-TARIEFDEEL/534e-5vdg/data\">Prijsinformatie parkeerautomaten, RDW</a></li>\r\n                <li><a href=\"https://www.cbs.nl/nl-nl/nieuws/2020/42/vermogen-van-huishoudens-in-2019-hoger-door-eigen-woning\">Gemiddeld vermogen per huishuiden, CBS</a></li>\r\n                <li><a href=\"https://www.cbs.nl/nl-nl/maatschappij/verkeer-en-vervoer/ov-monitor/hoe-bereikbaar-is-het-ov/afstand-tot-het-station-en-autobezit-per-gemeente-\">Gemiddelde afstand tot station en autobezit, CBS</a></li></ul>\r\n            <h3>Lege waardes</h3>\r\n            <p>Lege waardes kunnen onstaan door niet beschikbare data, data die niet valide of ontransformeerbaar is of data die als onrealistisch wordt beschouwd. In dit project is alle data beschouwd als realistisch, maar worden lege waardes standaard op 0 gezet. Geen parkeergroei betekent dus niet perse dat de plaats geen parkeerautomaten heeft, maar dat deze data niet beschikbaar is, dit om andere vergelijkingen wel mogelijk te maken. Dit geldt voor alle gebruikte variabelen. Steden zonder enige valide data worden niet meegenomen in de data.</p>\r\n            <h3>Conclusie</h3>\r\n            <p>Uit de onderzochte data is geen relevant verband gebleken. Er lijkt een correlatie te zijn tussen een laag vermogen en een lage uurprijs, en de groei van parkeerautomaten. Echter, kan er niet worden aangetoond dat het een het ander veroorzaakt.</p>\r\n            <p>Dit is ook te danken aan het feit dat de data incompleet oogt.</p>\r\n        </section>\r\n    )\r\n}\r\n","import React, { useState, useRef, useEffect } from 'react';\nimport CirclePlot from './CirclePlot'\nimport './App.css'\nimport Cities from './Cities';\nimport Introduction from './Introduction';\nimport getData from './modules/getData.js'\nimport ScrollButton from './ScrollButton'\nimport { cleanAverages } from './modules/cleanData.js'\nimport About from './About';\nconst d3 = require('d3')\n\nconst root = document.getElementById('root')\nconst width = window.innerWidth\nconst heigth = window.innerHeight\n\nconst introHeading = \"De auto in de stad\"\nconst introduction = \"Parkeerdata kent vele richting en inzichten. Ik heb er voor gekozen om mij te richten op de groei in parkeerfaciliteiten in verschillende gebieden. Ik ben daarvoor gaan kijken naar het verschil in deze groei per gebied en heb deze vergeleken tegen verschillende variabelen als: welvaart, gemiddelde uurprijs, afstand tot station, etc. Hiermee wilde ik bekijken of duurdere/rijkere gebieden in de lange termijn meer terugkrijgen voor hun geld.\"\n\nfunction App() {\n  const [cityAverages, setcityAverages] = useState(null)\n  const [verkoopPunten, setVerkoopPunten] = useState(null)\n  const cityAveragesURL = 'https://gist.githubusercontent.com/SamSlotemaker/730c01c655eb078cde3e960d79aee94e/raw/c8a5921d66241900db6589149290abba16e342cb/stedenGemiddelden2.json'\n  const geoVerkoopPuntenURL = 'https://gist.githubusercontent.com/SamSlotemaker/62fc5047562f522f21bd584605297a3e/raw/1645b201852ba7e368ebae45136d9bb69dae7907/verkoopPunten.json'\n\n  //fechting data on loading page\n  useEffect(() => {\n    getData(cityAveragesURL).then(result => {\n      cleanAverages(result)\n      setcityAverages(result)\n\n    })\n    getData(geoVerkoopPuntenURL).then(result => {\n      setVerkoopPunten(result)\n    })\n  }, [])\n\n  return (\n    <>\n      <ScrollButton scrollDirection={1} />\n      <ScrollButton scrollDirection={2} />\n      <Introduction heading={introHeading} text={introduction} />\n      {cityAverages && <CirclePlot cityAverages={cityAverages} node={root} width={width - 100} height={heigth - 50} />}\n      {cityAverages && verkoopPunten && <Cities cityAverages={cityAverages} verkoopPunten={verkoopPunten} />}\n      <About />\n    </>\n  )\n}\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\n\nReactDOM.render(\n  <App />, document.getElementById('root')\n);\n\n"],"sourceRoot":""}